import { google, drive_v3 } from 'googleapis';
import { JWT } from 'google-auth-library';
import { GSStatus, logger } from '@godspeedsystems/core';
import * as fs from 'fs/promises';

export interface ServiceAccountKey {
    type?: string;
    project_id?: string;
    private_key_id?: string;
    private_key?: string;
    client_email?: string;
    client_id?: string;
    auth_uri?: string;
    token_uri?: string;
    auth_provider_x509_cert_url?: string;
    client_x509_cert_url?: string;
    universe_domain?: string;
}

export interface WebhookRegistrationResult {
    success: boolean;
    externalId?: string;    // Google's unique resource ID for the channel.
    resourceId?: string;    // The original resource ID (folderId/fileId) that was watched.
    secret?: string;        // Google's channel ID, used for validation.
    startpageToken?: string;
    nextPageToken?: string;
    otherCrawlerSpecificTokens?: any;
    error?: string;
}

export interface WebhookDeregistrationResult {
    success: boolean;
    error?: string;
}

export class GDriveApiUtils {

    /**
     * Creates an authenticated Google Drive client using a Service Account key.
     * @param serviceAccountConfig An object containing the serviceAccountKey as a string or a file path.
     * @returns An authenticated Drive client instance.
     * @throws {Error} If authentication fails or the service account key is invalid.
     */
    private static async getAuthClient(serviceAccountConfig: { serviceAccountKey?: string; serviceAccountKeyPath?: string }): Promise<drive_v3.Drive> {
        let serviceAccountKey: ServiceAccountKey;

        try {
            if (serviceAccountConfig.serviceAccountKey) {
                serviceAccountKey = JSON.parse(serviceAccountConfig.serviceAccountKey);
            } else if (serviceAccountConfig.serviceAccountKeyPath) {
                const keyFileContent = await fs.readFile(serviceAccountConfig.serviceAccountKeyPath, 'utf8');
                serviceAccountKey = JSON.parse(keyFileContent);
            } else {
                throw new Error("Service account key or key path is missing for Google Drive authentication.");
            }
        } catch (error: any) {
            logger.error(`[gdrive-api-utils] Failed to load/parse service account key: ${error.message}`, { error });
            throw new Error(`Invalid service account key: ${error.message}`);
        }

        if (!serviceAccountKey.client_email || !serviceAccountKey.private_key) {
            throw new Error("Service account key is missing 'client_email' or 'private_key'.");
        }

        const jwtClient = new google.auth.JWT({
            email: serviceAccountKey.client_email,
            key: serviceAccountKey.private_key,
            scopes: ['https://www.googleapis.com/auth/drive.readonly'],
        });

        try {
            await jwtClient.authorize();
            logger.info("[gdrive-api-utils] JWT client authorized successfully.");
            return google.drive({ version: 'v3', auth: jwtClient });
        } catch (error: any) {
            logger.error(`[gdrive-api-utils] Failed to authorize JWT client or create Drive client: ${error.message}`, { error });
            throw new Error(`Authentication failed: ${error.message}`);
        }
    }

    /**
     * Registers a new watch channel (webhook) with the Google Drive API.
     * @param externalResourceId The ID of the Drive folder/file to watch.
     * @param callbackUrl The HTTPS URL for Google to send notifications to.
     * @param channelToken A unique string for the channel, generated by our system.
     * @param serviceAccountConfig The service account configuration.
     * @returns The result of the registration operation.
     */
    public static async registerWebhook(
        externalResourceId: string, // The folder/file ID to watch
        callbackUrl: string,
        channelToken: string, // Our internally generated unique ID for the channel
        serviceAccountConfig: { serviceAccountKey?: string; serviceAccountKeyPath?: string },
    ): Promise<WebhookRegistrationResult> {
        logger.info(`Attempting to register webhook for resource ID: ${externalResourceId}`);
        try {
            const drive = await this.getAuthClient(serviceAccountConfig);
            
            // Step 1: Get the starting page token to mark the current state of the drive.
            // This is crucial for fetching only new changes after the webhook is created.
            const startPageTokenResponse = await drive.changes.getStartPageToken({});
            const startPageToken = startPageTokenResponse.data.startPageToken;

            if (!startPageToken) {
                logger.error("[gdrive-api-utils] Failed to get starting page token for GDrive.");
                return { success: false, error: "Failed to get starting page token." };
            }

            const channelPayload = {
                id: channelToken, // This ID is used to validate incoming notifications.
                type: 'web_hook',
                address: callbackUrl.trim(),
            };

            // Step 2: Create the watch channel, telling Google to monitor the resource.
            const response = await drive.files.watch({
                fileId: externalResourceId,
                requestBody: channelPayload,
            });

            if (response.data.id && response.data.resourceId) {
                logger.info(`GDrive Watch Channel Registered for file ID ${externalResourceId}`);
                
                // Step 3: Return the critical IDs and the start token for the orchestrator to store.
                return {
                    success: true,
                    secret: response.data.id, 
                    resourceId: externalResourceId, 
                    externalId: response.data.resourceId, 
                    startpageToken: startPageToken,
                    nextPageToken: startPageToken 
                };
            } else {
                logger.error("[gdrive-api-utils] API call to create watch channel succeeded, but no channel ID or resource ID was returned.");
                return { success: false, error: "API call succeeded, but no channel ID or resource ID was returned." };
            }
        } catch (error: any) {
            logger.error(`[gdrive-api-utils] Failed to register watch channel with GDrive API for resource ID ${externalResourceId}: ${error.message}`, { error });
            return { success: false, error: error.message };
        }
    }

    /**
     * Stops a watch channel (deregisters a webhook) with the Google Drive API.
     * @param webhookId The ID of the watch channel (Google's channel ID).
     * @param channelResourceId The channel's unique resource ID.
     * @param serviceAccountConfig The service account configuration.
     * @returns The result of the deregistration operation.
     */
    public static async deregisterWebhook(
        webhookId: string, // Google's channel ID
        channelResourceId: string, // Google's channel resource ID
        serviceAccountConfig: { serviceAccountKey?: string; serviceAccountKeyPath?: string },
    ): Promise<WebhookDeregistrationResult> {
        logger.info(`[gdrive-api-utils] Attempting to stop GDrive watch channel with ID: ${webhookId}`);
        
        try {
            const drive = await this.getAuthClient(serviceAccountConfig);
            await drive.channels.stop({
                requestBody: {
                    id: webhookId,
                    resourceId: channelResourceId,
                }
            });
            logger.info(`[gdrive-api-utils] Successfully stopped GDrive watch channel with ID: ${webhookId}`);
            return { success: true };
        } catch (error: any) {
            logger.error(`[gdrive-api-utils] Failed to stop GDrive watch channel ${webhookId}: ${error.message}`, { error });
            return { success: false, error: error.message };
        }
    }

    /**
     * Verifies that the service account credentials are valid by attempting to authenticate.
     * @param serviceAccountConfig The service account configuration.
     * @returns A boolean indicating if the credentials are valid.
     */
    public static async verifyCredentials(serviceAccountConfig: { serviceAccountKey?: string; serviceAccountKeyPath?: string }): Promise<boolean> {
        try {
            await this.getAuthClient(serviceAccountConfig);
            logger.info("[gdrive-api-utils] Google Drive credentials successfully verified.");
            return true;
        } catch (error: any) {
            logger.error(`[gdrive-api-utils] Failed to verify Google Drive credentials: ${error.message}`, { error });
            return false;
        }
    }
}